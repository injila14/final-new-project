Part 1 – Train Schedule between two stations 

1.	Activity_main (xml) is generated by android studio itself, what it shows is the demo layout of how we will proceed and how the layout will look like.
2.	Here we included the layout on which we are going to do certain changes, add some values in interest to the app.
3.	There in content_main, we defined certain text views and other parameters with which the app becomes more responsive and interactive.
4.	In response to the layout we produced java files known as Main Activity, in this java file we defined the parameters included in the layout, such as text view and more. There in the file we made a function (method) to define what happens when we click those text views defined in content_main layout that further included in activity_main layout. 
5.	As soon as we define the click listener, we defined where it goes meaning which activity class (another java file) is executed after this click.
6.	Think we just click to Train schedule text view and now we are taken to the activity_map_destination layout and class.
7.	Talking about activity_main_destination here we included map fragment and some more text views to increase understandability. And further we included some buttons and now what this buttons do? They either reset the map or take you to another activity (more defined on map_destination class)
8.	In response to the layout we produced a class map_destination where we as usual defined the buttons and map fragment too.
9.	Now what these buttons do, the reset_button clears all the markers on the map and next_button takes you to the “Computation class” as soon as you selected your source and destination position.
10.	 Reset_button simply clears with “mMap.clear();“  and it only clears when user has selected something on the map that is taken care with those two Booleans.
11.	On first case we had set those Booleans as true and when the user is done with long and click listener those two are made false. So that we don’t have more than one source or destination. And after that we checked on the next button that if those Booleans are set as false only then we can proceed to out next activity. If doesn’t just print a toast to user to give some input.
12.	 In OnMapReady function in the same class file first we checked for the connection, which connection? The connection to internet. Otherwise it would print the toast to connect to the internet.
13.	Connection is checked in ConnectionCheck java file. 
14.	 After this when the user clicks on to the next_button,he is taken to Computation class and four more variable and their values are carried by him, here Source and destination latitude and longitude are carried.
15.	 In Computation class, our primary concern is the Database, i.e. in the class file SD_database.
16.	 In SD_database class first we have created a table named SD_table. In table we have name, code, latlng of the station and why we need it? We need because when the user inputs the source and destination, to fulfill what station he wants to see we need a database, database that matches the source and destination station or finds the closest station to the station input in the database.
17.	In SD_database class we have this insert function, Insert function adds whole dataset, set of all the important stations, there name, code, latlng.
18.	 One more thing happens in this insert function, every time this insert function is called the database is deleted with the delete query, because we don’t want to merge our data with the data previously added.
“db.delete(Source_table,null,null);”

19.	 Now let’s calculate distance, distance between the given source position to the position in the database and same in the case of destination position.
20.	 In distance_calc function we have two parameters, position’s latitude and longitude.
21.	 In distance_calc we need cursor that we carry all the data(tuples) in the database, we have this min_distance resembling the first min_distance with the first tuple in regarding to the source position. Then we have a loop, loop till the end of the database. That will calculate the distance as we did in the first calculation for the min distance, now we have two distance, in loop itself we check the min_distance and in return we send closest station value.
22.	As soon as we get this station_code, in the step we try to get its station name.
23.	 After this we get the latitude and longitude of the given station code and return latlng containing both lat and lng of station code passed as a parameter in the function.
24.	 Now we come to HTML parser class, here the main process goes, out client (mobile app) request the server for the data and after polishing the data return back to the user.
25.	Before going in depth we made a list, a list of type trainlist class in app. This got does getter and setter and have different data members which we will declare while the polish data needs some memory and after that we will return the data set in that list.
26.	In HTMLParser, we have set “0” for in train_number when we are unable to connect to our url.
27.	Now back to Computation class, we first check for the train_number, if the set train_number is “0” that means we could not connect to the server hence we set a toast where it says “Try Again”.
28.	Now In Computation_layout we made a blank layout with some id, in this layout we will dynamically add values fetch and then stored in the list and iterating the list we will display it on the screen.
29.	We are going to use a text view to display the Train Number and Train Name.
30.	Now complete of part 1, we successfully printed the train schedule between two stations.


Part 2 – Train Number and Route Information
1.	Back to the main activity, same boring old stuff, creating activity and a text view, where text view says Train Number, tap on it and now you are on Train_Number Activity.
2.	What new about Train_Number class? Here in the layout of activity_train_number we will enter a train number and further processing will take place.
3.	We made an EditText field in the layout and a button too. In EditText please enter a valid TrainNumber otherwise app will simply again ask you to do the same.
4.	Now press the Button and you voila you are taken to another activity but the same one, a different, it’s a map. Showing you the route information.
5.	As soon as you click on Check Route Button, you are taken to Route_Map activity, this is the activity of a map. As same as part one we implemented the fragment activity and the same layout activity_route_map.
6.	Everything is same, only difference is in the parser, after creating the map, we called in the Train_number_parser class. Here in the class we passed the train_number.
7.	As we created a Train_List in first part we created a Number_list in part 2, the data members in the Number_List we accessible by getter and setter in the same class.
8.	Now the train_number_parser parses the whole json data and presents that into the single list. And returns that list.
9.	Once we get that list in Routemap activity we will check if it is empty, yes if it is we will toast a message “Try again” and we redirect the user back to the Train_Number activity we he can again input some data.
10.	Now we check for the response code, if it is not equals to 200, that simply says it got connected but the user input some wrong data, so presents a toast again saying “Entered the wrong data”.
11.	 After iterating through whole data we divide the data in three parts source, destination and route. For every part we make a marker showing the values in list, proper title and other valuables.
12.	After all markers are set, we simply knit all the markers under a string of polyline class using object line.
